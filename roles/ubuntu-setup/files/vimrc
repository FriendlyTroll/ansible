" plugins
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let need_to_install_plugins = 1
endif

call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'ap/vim-buftabline'
Plug 'airblade/vim-gitgutter'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'majutsushi/tagbar'
Plug 'vim-scripts/indentpython.vim'
Plug 'lepture/vim-jinja'
Plug 'pangloss/vim-javascript'
Plug 'alvan/vim-closetag'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tommcdo/vim-fubitive'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ryanoasis/vim-devicons'
Plug 'pearofducks/ansible-vim'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-rhubarb.git'
call plug#end()

if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif

" set space as leader key
nnoremap <SPACE> <Nop>
let mapleader=" "

filetype plugin indent on
syntax on


" ##########
" # colors #
" ##########
" color scheme
colorscheme onedark
" this has to be applied after colorscheme
" buftabline custom highlight
highlight link BufTabLineActive Cursor
highlight link BufTabLineActive Search
" pop menu highlighted item color
highlight link PmenuSel WildMenu

" enable 256 colors
set t_Co=256
set t_ut=

" color the column 80
"set colorcolumn=80

" ###########
" # /colors #
" ###########

" writes swap faster and also updates gitgutter icons (miliseconds)
set updatetime=1000

set hidden

" enable mouse
set mouse=a

" code folding
set foldmethod=indent
set foldlevel=99

" this will read so called modelines from opened files which
" can automatically set vim options like syntax highlighting
set modeline

" always show the status bar
set laststatus=2

" turn on line numbering
set number relativenumber

" sane text files
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8

" sane editing
set tabstop=2
set shiftwidth=2
set softtabstop=2

set expandtab
set viminfo='25,\"50,n~/.viminfo

" sync vim and system clipboard
set clipboard=unnamed,unnamedplus

" ##############
" # coc config #
" ##############
" change highlight color of selected item
" link to other group example
" highlight link CocMenuSel TabLineSel
highlight CocMenuSel ctermfg=235 ctermbg=39

" Use <c-space> to trigger completion
" c-space produces @ character in insert so we map this
" see https://stackoverflow.com/questions/23189568/control-space-vim-key-binding-in-normal-mode-does-not-work
inoremap <silent><expr> <c-@> coc#refresh()

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" coc-nvim extensions auto-Installin
let g:coc_global_extensions = ['coc-pyright', 'coc-jedi', '@yaegassy/coc-ansible', 'coc-groovy']
let g:coc_disable_startup_warning = 1
let g:coc_filetype_map = {
  \ 'yaml.ansible': 'ansible',
  \ }


" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')


" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" ################
" # / coc config #
" ################


" lightline
set noshowmode
let g:lightline = { 'colorscheme': 'onedark',
                  \ 'active': {
                  \ 'left': [ [ 'mode', 'paste' ],
                  \           [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
                  \ },
                  \ 'component_function': {
                  \ 'gitbranch': 'FugitiveHead' },
                  \ }


" file browser
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let NERDTreeMinimalUI = 1
let g:nerdtree_open = 0

function NERDTreeToggle()
    if g:nerdtree_open == 1
        let g:nerdtree_open = 0
    else
        let g:nerdtree_open = 1
        wincmd p
    endif
endfunction

function! StartUp()
    if 0 == argc()
        NERDTree
    end
endfunction


" ##################
" # custom key map #
" ##################
" indent/unindent with tab/shift-tab
"nmap <Tab> >>
nmap <S-tab> <<
imap <S-Tab> <Esc><<i
vmap <Tab> >gv
vmap <S-Tab> <gv

map <leader>n :NERDTreeToggle<CR>

" <Leader>f{char} to move to {char}
" map <leader>f <Plug>(easymotion-bd-f)
" nmap <leader>f <Plug>(easymotion-overwin-f)

" Move to word
map  <leader>w <Plug>(easymotion-bd-w)
nmap <leader>w <Plug>(easymotion-overwin-w)

" tags
map <leader>t :TagbarToggle<CR>

" Ctrl bindings
" copy, cut and paste
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" change window sizes
nmap <C-Up> :resize +10<CR>
nmap <C-Down> :resize -10<CR>
nmap <C-Left> :vertical resize -10<CR>
nmap <C-Right> :vertical resize +10<CR>

" move through split windows
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" move through buffers
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>


" fzf plugin mapping
" open command history
nnoremap <leader>fh :History:<CR>
" open old files history
nnoremap <leader>fo :History<CR>
" open buffers
nnoremap <leader>fb :Buffers<CR>
" search for files
nnoremap <leader>ff :Files<CR>
" search in open buffers for lines
nnoremap <leader>fl :Lines<CR>
" search word in all files with silversearcher
nnoremap <leader>fw :Ag<CR>
" open Commits
nnoremap <leader>fc :Commits<CR>
" / fzf plugins


" open vimfugitive git window
nnoremap <F7> :G<CR>

" switch to next buffer and close previous
nnoremap <leader>x :bp\|bd #<CR>

" search for word in entire project when selected
" in visual mode
vmap <leader>f y :Ag <C-r>"<CR>

" show opened file in tree
map <leader>l :NERDTreeFind<CR>

" exit insert mode when typing jj quickly
inoremap jj <ESC>

" yank name of current file to system clipboard
nmap cp :let @+ = expand("%")<cr>
" full path
nmap cP :let @+ = expand("%:p")<cr>

" delete all buffers except current
nmap <leader>bo :%bd\|e#\|bd#<CR>

" git push
nmap <leader>p :Git push<CR>
" git pull
nmap <leader>P :Git pull<CR>

" encrypt ansible vault (see below autocmd for decryption)
nnoremap <leader>ae :%! ansible-vault encrypt --output -<CR>

" quickfix window maps
nnoremap [q   :cprevious<CR>
nnoremap ]q   :cnext<CR>
nnoremap [Q   :cfirst<CR>
nnoremap ]Q   :clast<CR>
nnoremap qc   :cclose<CR>

" quit window
nnoremap gq   :quit<CR>

" ##################
" #/custom key map #
" ##################


" disable autoindent when pasting text
" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"


" ##############
" # F keys map #
" ##############
" fzf plugins
" open command history
nnoremap <F1> :History:<CR>

" open buffers
nnoremap <F2> :Buffers<CR>

" search for filenames with F3 key
nnoremap <F3> :Files<CR>

" search in open buffers
nnoremap <F4> :Lines<CR>

" search word in all files with silversearcher
nnoremap <F5> :Ag<CR>

" open Commits
nnoremap <F6> :Commits<CR>

" / fzf plugins

" open vimfugitive git window
nnoremap <F7> :G<CR>

" switch to next buffer and close previous
nnoremap <F12> :bp\|bd #<CR>
" ##############
" #/F keys map #
" ##############


" unlimited undo history
if has('persistent_undo')      
  set undofile                 
  silent !mkdir -p ~/.vim/undo 
  set undodir=$HOME/.vim/undo 
  endif

" - down / up / left / right
let g:fzf_layout = { 'down': '50%' }


" ################
" # autocommands #
" ################
" automatically decrypt ansible vault when reading it
" see above mapping to encrypt
autocmd BufNewFile,BufRead *
  \ if getline(1) =~ '$ANSIBLE_VAULT;.*;AES256'     |
  \   silent execute '%! ansible-vault decrypt --output -' |
  \ endif

autocmd FileType python map <buffer> <F9> :w<CR>:!clear;python "%"<CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:!clear;python "%"<CR>

" open NERDTree when entering vim
autocmd VimEnter * call StartUp()
" move to right window immediately when entering vim
autocmd VimEnter * silent! wincmd l

" restore place in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType jinja2 setlocal commentstring={#\ %s\ #}

" autosave after exiting insert mode
augroup autosave
    autocmd!
    autocmd BufRead * if &filetype == "" | setlocal ft=text | endif
    autocmd FileType * autocmd TextChanged,InsertLeave <buffer> if &readonly == 0 | silent! write | endif
augroup END

" set filetype for ansible files in ansible directory
" for ansible vim plugin
autocmd BufRead,BufNewFile */ansible/*.yml set filetype=yaml.ansible

autocmd BufEnter Jenkinsfile set filetype=groovy
" ################
" #/autocommands #
" ################

" search for text in hidden files as well, but not in .gitignore
" add -U to search in .gitignore as well
command! -bang -nargs=* Ag
    \ call fzf#vim#ag(<q-args>, '--hidden', call('fzf#vim#with_preview', ['right', 'ctrl-/']), <bang>0)
