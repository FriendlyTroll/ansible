" plugins
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let need_to_install_plugins = 1
endif

call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'ap/vim-buftabline'
Plug 'airblade/vim-gitgutter'
Plug 'preservim/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'majutsushi/tagbar'
Plug 'vim-scripts/indentpython.vim'
Plug 'lepture/vim-jinja'
Plug 'pangloss/vim-javascript'
Plug 'alvan/vim-closetag'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tommcdo/vim-fubitive'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ryanoasis/vim-devicons'
call plug#end()

if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif

filetype plugin indent on
syntax on

" color scheme
colorscheme onedark

set hidden

" mouse
set mouse=a

" code folding
set foldmethod=indent
set foldlevel=99

" this will read so called modelines from opened files which
" can automatically set vim options like syntax highlighting
set modeline

" always show the status bar
set laststatus=2

" enable 256 colors
set t_Co=256
set t_ut=

" turn on line numbering
set number relativenumber

" sane text files
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8

" sane editing
set tabstop=2
set shiftwidth=2
set softtabstop=2

" color the column 80
"set colorcolumn=80

set expandtab
set viminfo='25,\"50,n~/.viminfo

" ##############
" # coc config #
" ##############
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction
let g:coc_disable_startup_warning = 1
let g:coc_filetype_map = {
  \ 'yaml.ansible': 'ansible',
  \ }

" Make <C-m> to accept selected completion item or notify coc.nvim to format
inoremap <silent><expr> <C-m> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" ################
" # / coc config #
" ################

" lightline
set noshowmode
let g:lightline = { 'colorscheme': 'onedark',
                  \ 'active': {
                  \ 'left': [ [ 'mode', 'paste' ],
                  \           [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
                  \ },
                  \ 'component_function': {
                  \ 'gitbranch': 'FugitiveHead' },
                  \ }


" file browser
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let NERDTreeMinimalUI = 1
let g:nerdtree_open = 0
function NERDTreeToggle()
    if g:nerdtree_open == 1
        let g:nerdtree_open = 0
    else
        let g:nerdtree_open = 1
        wincmd p
    endif
endfunction

function! StartUp()
    if 0 == argc()
        NERDTree
    end
endfunction

" ##################
" # custom key map #
" ##################
" indent/unindent with tab/shift-tab
"nmap <Tab> >>
nmap <S-tab> <<
imap <S-Tab> <Esc><<i
vmap <Tab> >gv
vmap <S-Tab> <gv

map <leader>n :call NERDTreeToggle()<CR>

" move through split windows
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>

" move through buffers
nmap b<space> :bp!<CR>
nmap <space> :bn!<CR>
nmap <leader>x :bd<CR>

" tags
map <leader>t :TagbarToggle<CR>

" Ctrl bindings
" copy, cut and paste
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" change window sizes
nmap <C-Up> :resize +10<CR>
nmap <C-Down> :resize -10<CR>
nmap <C-Left> :vertical resize -10<CR>
nmap <C-Right> :vertical resize +10<CR>

" search whole word within files recursively with Shift+f
nnoremap <S-s> :vimgrep // ** **/.*<left><left><left><left><left><left><left><left><left><left>

" search for word in entire project when selected
" in visual mode
vmap <leader>f y :vimgrep // **<left><left><left><left><C-r>"

" show opened file in tree
map <leader>l :NERDTreeFind<CR>

" exit insert mode when typing jj quickly
inoremap jj <ESC>

" yank name of current file to system clipboard
nmap cp :let @+ = expand("%")<cr>
" full path
nmap cP :let @+ = expand("%:p")<cr>

" git push
nmap <leader>p :Git push<CR>
" git pull
nmap <leader>P :Git pull<CR>

" save on Ctrl-s
nmap <C-s> :w<CR>

" encrypt ansible vault (see below autocmd for decryption)
nnoremap <leader>ae :%! ansible-vault encrypt --output -<CR>
" ##################
" #/custom key map #
" ##################

" disable autoindent when pasting text
" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"


" ##############
" # F keys map #
" ##############
" fzf plugins
" open command history
nnoremap <F1> :History:<CR>

" open buffers
nnoremap <F2> :Buffers<CR>

" search for filenames with F3 key
nnoremap <F3> :Files<CR>

" search in open buffers
nnoremap <F4> :Lines<CR>

" open/close nerdtree
nnoremap <F5> :NERDTreeToggle<CR>
inoremap <F5> <C-o>:NERDTreeToggle<CR>

" open Commits
nnoremap <F6> :Commits<CR>

" open vimfugitive git window
nnoremap <F7> :G<CR>

" switch to next buffer and close previous
nnoremap <F12> :NERDTreeToggle<bar>bd<bar>NERDTreeToggle<bar><CR><c-w>l
" ##############
" #/F keys map #
" ##############

" unlimited undo history
if has('persistent_undo')      
  set undofile                 
  silent !mkdir -p ~/.vim/undo 
  set undodir=$HOME/.vim/undo 
  endif

" - down / up / left / right
let g:fzf_layout = { 'down': '50%' }


" ################
" # autocommands #
" ################
" automatically decrypt ansible vault when reading it
" see above mapping to encrypt
autocmd BufNewFile,BufRead *
  \ if getline(1) =~ '$ANSIBLE_VAULT;.*;AES256'     |
  \   silent execute '%! ansible-vault decrypt --output -' |
  \ endif

autocmd FileType python map <buffer> <F9> :w<CR>:!clear;python "%"<CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:!clear;python "%"<CR>

" open NERDTree when entering vim
autocmd VimEnter * call StartUp()
" move to right window immediately when entering vim
autocmd VimEnter * silent! wincmd l

" restore place in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2

" ################
" #/autocommands #
" ################
