#!/bin/bash

# adapted from here
# https://borgbackup.readthedocs.io/en/stable/quickstart.html#automating-backups

### AD-HOC CMDS: ###
# init repo:
# BORG_REPO={{ borg_repo }} && borg init --encryption=repokey $BORG_REPO

# export key:
# BORG_REPO={{ borg_repo }} && borg key export $BORG_REPO {{ borg_key_export_path }}/borg_key.txt

# list backups:
# BORG_REPO={{ borg_repo }} borg list

# mount/unmount specific backup:
# BORG_REPO={{ borg_repo }}::antisaPC-2020-03-03T16:11:40" && mkdir /tmp/borg && borg mount $BORG_REPO /tmp/borg
# borg umount /tmp/borg

### SCRIPT START ###
# ask an external program to supply the passphrase:
# export BORG_PASSCOMMAND='pass show backup'

# Setting this, so the repo does not need to be given on the commandline:
export BORG_REPO={{ borg_repo }}
# Setting this, so you won't be asked for your repository passphrase:
export BORG_PASSPHRASE={{ vault_borg_passphrase }}
# Setting this, to have access to the key for login into server
#export SSH_AUTH_SOCK=/run/user/1000/keyring/ssh
# Setting this for notify-osd below
export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

/usr/bin/notify-send --icon=org.gnome.DejaDup "Starting backup"

# If the backup, running silently in the background, is rudely interrupted 
# by me rebooting my computer it will leave the write lock in place. It is 
# save to remove this lock because there is only one client uploading to the server.

/usr/bin/borg break-lock


# Backup the most important directories into an archive named after
# the machine this script is currently running on:

/usr/bin/borg create                         \
    --verbose                       \
    --filter AME                    \
    --list                          \
    --stats                         \
    --show-rc                       \
    --compression zlib,9            \
    --exclude-caches                \
    --exclude '/home/*/.cache/*'    \
    --exclude '/home/*/.config/*/Cache'    \
    --exclude '/home/*/.gvfs'    \
    --exclude '/home/*/.steam'    \
                                    \
    ::'{hostname}-{now}'            \
    /home/antisa                    \

backup_exit=$?

/usr/bin/notify-send --icon=org.gnome.DejaDup "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 2 monthly and yearly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

/usr/bin/borg prune                          \
    --list                          \
    --prefix '{hostname}-'          \
    --show-rc                       \
    --keep-daily    7               \
    --keep-weekly   4               \
    --keep-monthly  4               \
    --keep-yearly   2               \

prune_exit=$?

# actually free repo disk space by compacting segments
/usr/bin/notify-send --icon=org.gnome.DejaDup "Compacting repository"
/usr/bin/borg compact $BORG_REPO

compact_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))
global_exit=$(( compact_exit > global_exit ? compact_exit : global_exit ))

# list backups
echo "========== LIST OF CURRENT BACKUPS =========="
/usr/bin/borg list

if [ ${global_exit} -eq 0 ]; then
    /usr/bin/notify-send --icon=org.gnome.DejaDup "Backup and Prune finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    /usr/bin/notify-send --icon=org.gnome.DejaDup "Backup and/or Prune finished with warnings"
else
    /usr/bin/notify-send --icon=org.gnome.DejaDup "Backup and/or Prune finished with errors"
fi

exit ${global_exit}
