---
- name: Check on which Ubuntu we are
  command: lsb_release -cs
  register: ubuntu_version
  tags: docker

- debug:
    msg: Ubuntu version is {{ ubuntu_version.stdout }}
    
- name: Create custom directories
  file:
      path: "{{ item }}"
      state: directory
      mode: 0755
  loop:
      - $HOME/Documents/terminal_logs
      - $HOME/.config/mpv
      - $HOME/.config/asciinema
      - $HOME/.local/share/nautilus/scripts
      - $HOME/Applications  # for AppImages
      - $HOME/.local/share/fonts
      - $HOME/.local/my_global_githooks
      - $HOME/.anacron/etc
      - $HOME/.anacron/spool
      - $HOME/.vim
  tags: config, git, dirs


- block:
  - name: Add slack apt key
    apt_key:
      url: https://packagecloud.io/slacktechnologies/slack/gpgkey

  - name: Install slack repo
    apt_repository:
      repo: deb https://packagecloud.io/slacktechnologies/slack/debian/ jessie main

  # https://protonvpn.com/support/linux-ubuntu-vpn-setup/
  - name: Install protonvpn repo
    apt:
      deb: https://repo.protonvpn.com/debian/dists/stable/main/binary-all/protonvpn-stable-release_{{ protonvpn_version }}_all.deb
    tags: packages

  # https://community.openvpn.net/openvpn/wiki/OpenVPN3Linux
  - name: Install openvpn3
    deb822_repository:
      name: openvpn3
      types: deb
      suites: "{{ ubuntu_version.stdout }}"
      uris: https://packages.openvpn.net/openvpn3/debian
      components: main
      signed_by: https://packages.openvpn.net/packages-repo.gpg
    tags: openvpn3

  - name: Install python specific packages
    apt:
        name:
            - flake8
        update_cache: true
    tags: python-packages

  become: true
  become_user: root

- name: Include tasks for Ubuntu version
  include_tasks: 2204.yml
  when: ubuntu_version.stdout == "jammy"

- include_tasks: 2404.yml
  when: ubuntu_version.stdout == "noble"

- name: Install desktop specific ubuntu packages
  apt:
      name:
          - steam-devices
          - steam-installer
      update_cache: yes
  become: true
  become_user: root
  tags: packages
  when: '"t14" not in ansible_hostname'

- name: Install laptop specific ubuntu packages
  apt:
      name:
          - powertop
      update_cache: yes
  become: true
  become_user: root
  tags: packages
  when: '"t14" in ansible_hostname'

- name: Install zoom
  apt:
    deb: https://zoom.us/client/{{ zoom_version }}/zoom_amd64.deb
  become: true
  become_user: root
  tags: packages, zoom

- name: Update snap packager
  command: snap refresh
  become: true
  become_user: root

# need to install snaps one by one because of this bug
# https://forum.snapcraft.io/t/trying-to-re-install-multiple-packages-with-snap-install-fails-with-install-refresh-information-results-from-the-store/24859
- name: Install ubuntu snap packages - acestreamplayer
  command: snap install acestreamplayer
  become: true
  become_user: root
  when: '"t14" in ansible_hostname'

- name: Install AppImages appimage daemon for integration
  shell:
      cmd: wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "appimaged-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2) -P ~/Applications/ && chmod --recursive +x ~/Applications/
  tags: appimage

- name: Copy bashrc
  template:
      src: bashrc.j2
      dest: $HOME/.bashrc
  tags: config, scripts, bashrc

- name: Copy HOME .config files
  copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
  loop:
      - { src: "asciinema_config", dest: "$HOME/.config/asciinema/config" }
      - { src: "vimrc", dest: "$HOME/.vimrc" }
      - { src: "mpv.conf", dest: "$HOME/.config/mpv" }
      - { src: "slack.desktop", dest: "$HOME/.local/share/applications/" }
      - { src: "tmux.conf", dest: "$HOME/.tmux.conf" }
      - { src: "coc-settings.json", dest: "$HOME/.vim/coc-settings.json" }
      - { src: "gitignore", dest: "$HOME/.gitignore" }
      - { src: "tridactyl.rc", dest: "$HOME/.tridactylrc" }
      - { src: "agignore", dest: "$HOME/.agignore" }
      - { src: "profile", dest: "$HOME/.profile" }
  tags: config, vimrc

- name: Install messenger for tridactylrc to work
  shell:
    cmd: curl -fsSl https://raw.githubusercontent.com/tridactyl/native_messenger/master/installers/install.sh -o /tmp/trinativeinstall.sh && sh /tmp/trinativeinstall.sh 1.24.2
  tags: tridactyl

- name: Link home fonts folder in asciinema folder
  file:
    src: "$HOME/.local/share/fonts"
    path: "$HOME/Documents/terminal_logs/fonts"
    state: link
    force: yes
  tags: asciinema,config

- name: Copy asciinema player config files
  copy:
      src:  "{{ item }}"
      dest: "$HOME/Documents/terminal_logs"
  loop:
      - "asciinema-player.css"
      - "asciinema-player.min.js"
      - "asciinema_player.html"
  tags: asciinema,config

- name: Open pgp files with seahorse
  command: xdg-mime default org.gnome.seahorse.Application.desktop application/pgp-keys

- name: Create cronjob to zip up logs from terminal recording program
  cron:
      name: "zip terminal logs"
      job: "find $HOME/Documents/terminal_logs -mtime +7 ! -name 'asciinema*' -exec bzip2 {} \\;"
      hour: "13"
      minute: "0"
  tags: cron

- name: Create cronjob to download wiki from my site
  cron:
      name: "download wiki from my site"
      job: "wget --header='X-DW-Token: {{ vault_dw_token }}' https://dw.exitstatus0.com/backup/dokuwiki.tar.bz2 --output-document=/home/antisa/dokuwiki.tar.bz2"
      hour: "17"
      minute: "30"
  tags: cron

- name: Copy opensubtitlesdownload script
  template:
      src: OpenSubtitlesDownload.j2
      dest: $HOME/.local/share/nautilus/scripts/OpenSubtitlesDownload.py
  tags: scripts

- name: Copy other useful nautilus scripts
  copy:
      src: "{{ item }}"
      dest: "$HOME/.local/share/nautilus/scripts"
      mode: 0755
  loop:
      - "nautilus-renamer.py"
      - "nautilus-resize-image"
      - "asciivideo.sh"
  tags: scripts

- block:
  - name: Mount backup disk at startup
    mount:
        path: /mnt/backup
        state: present
        src: UUID=f1a236ec-0809-4c61-b9c4-bee4427e728f
        fstype: ext4
        opts: defaults,noatime
    when: '"t14" not in ansible_hostname'

  - name: Mount touro disk at startup
    mount:
        path: /mnt/touro
        state: present
        src: root@192.168.99.143:/media/touro
        fstype: fuse.sshfs
        opts: noauto,user,x-systemd.automount,defaults,_netdev,allow_other,identityfile=/root/.ssh/id_ed25519
    when: '"t14" not in ansible_hostname'

  - name: Mount Western digital disk at startup
    mount:
        path: /mnt/wd4tb
        state: present
        src: UUID=033b3425-8b5c-4a58-b69a-108cfed2614b
        fstype: ext4
        opts: defaults,noatime
    when: '"t14" not in ansible_hostname'

  - name: Mount NAS NFS share
    mount:
        path: /mnt/nas
        state: present
        src: 192.168.99.135:/export/bigassnas
        fstype: nfs
        opts: defaults,noatime

  become: true
  become_user: root
  tags: mounts

- name: Add raspberrypis host key to the root user
  known_hosts:
      path: /root/.ssh/known_hosts
      name: raspberrypi_3b+
      key: raspberrypi_3b+ ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJH7iLv2mwvJ7ERSnrjdADbBzLF2Xo9dxANk9Vt+nY5bNTjrXNsm96Dc9U8g087TSkfYv8sLBQ9p7XKJieA0foo= root@raspberrypi
      state: present
  become: true
  become_user: root

- name: Generate ssh key for root user
  command:
    cmd: ssh-keygen -t ed25519  -q -f "/root/.ssh/id_ed25519" -N ""
    creates: "/root/.ssh/id_ed25519"
  become: true
  become_user: root

- name: Copy custom Gnome keyboard shortcuts file
  template:
    src: custom-shortcuts.conf.j2
    dest: /tmp/custom-shortcuts.conf
  tags: config

- name: Import custom Gnome keyboard shortcuts
  shell: dconf load / < /tmp/custom-shortcuts.conf
  tags: config

- name: Include gaming.yml tasks
  include_tasks: gaming.yml
  when: gaming is defined
  tags: sunshine

- name: Download Anki flashcards
  get_url:
      url: https://github.com/ankitects/anki/releases/download/{{ anki_version }}/anki-{{ anki_version }}-linux-qt6.tar.zst
      dest: /tmp/
      mode: 0755
  tags: anki

- name: Unarchive Anki flashcards
  unarchive:
    src: /tmp/anki-{{ anki_version }}-linux-qt6.tar.zst
    dest: /tmp/
    extra_opts:
      - --use-compress-program=unzstd
  tags: anki

- name: Install Anki flashcards
  command:
    chdir: /tmp/anki-{{ anki_version }}-linux-qt6
    cmd: sudo bash install.sh
  become: true
  become_user: root
  tags: anki

- name: Install nodesource repo (for coc.vim plugin)
  expect:
    command: /bin/bash -c "curl -sL https://install-node.vercel.app/lts | bash"
    responses:
      'Install Node.js*' : 'y'
  become: true
  become_user: root

- name: Install NerdFonts
  unarchive:
    src: https://github.com/ryanoasis/nerd-fonts/releases/download/{{ nerd_font_version }}/DroidSansMono.tar.xz
    dest: "$HOME/.local/share/fonts/" 
    remote_src: yes


- include_tasks: git.yml


- name: Copy borgbackup script
  template:
      src: borgbackup.sh.j2
      dest: $HOME/.local/bin/borgbackup.sh
      mode: 0700
  tags: config, backup, scripts

- name: Copy user anacrontab file
  copy:
    src: user_anacrontab
    dest: "$HOME/.anacron/etc/anacrontab"
  tags: config, backup

- name: Add user anacron to crontab
  cron:
    name: "run antisa user anacrontab"
    job: "/usr/sbin/anacron -s -t $HOME/.anacron/etc/anacrontab -S $HOME/.anacron/spool"
    special_time: hourly
    user: antisa
  tags: config, backup, cron

- name: Copy tmux scripts
  copy:
    src: tmux-scripts/
    dest: "$HOME/.local/bin/"
    mode: 0755
  tags: tmux

- block:
  - name: Add APT gpg key for Docker repo
    apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    tags: docker
    
  - name: Add docker repo
    apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ubuntu_version.stdout }} stable"
        state: present
    tags: docker
    
  - name: Install docker
    apt:
        name:
            - docker-ce
            - docker-ce-cli 
            - containerd.io
            - docker-buildx-plugin
            - docker-compose-plugin
        state: latest
        update_cache: yes
    tags: docker

  - name: Install virtualbox {{ virtualbox_version }}
    apt:
      deb: "{{ virtualbox_version }}"
    tags: vbox

  - name: Add user to additional groups
    user:
      name: antisa
      groups: docker,vboxusers
      append: yes
    tags: docker

  - name: Download Mikrotik winbox GUI
    get_url:
      url: https://download.mikrotik.com/routeros/winbox/{{ mikrotik_winbox_version }}/WinBox_Linux.zip
      dest: /tmp/
      mode: 0755
    tags: mikrotik

  - name: Unarchive Mikrotik
    unarchive:
      src: /tmp/WinBox_Linux.zip
      dest: /usr/local/bin/
      owner: antisa
    tags: mikrotik

  - name: Add .desktop file for Mikrotik GUI app
    copy:
      dest: /usr/share/applications/winbox-linux.desktop
      content: |
        [Desktop Entry]
        Name=WinBox-Linux
        Type=Application
        Terminal=false
        Exec=/usr/local/bin/WinBox
        Icon=/usr/local/bin/assets/img/winbox.png
        Comment=WinBox to Manage Mikrotik Routers
        Encoding=UTF-8
        Categories=Network;RemoteAccess;
        X-Desktop-File-Install-Version=0.30
        Keywords=mikrotik;
        Name[en_US]=WinBox-Linux
        StartupWMClass=WinBox
    tags: mikrotik

  become: true
  become_user: root

- name: Add tmux plugin manager
  git:
    repo: https://github.com/tmux-plugins/tpm
    depth: 1
    dest: ~/.tmux/plugins/tpm 
    accept_hostkey: true
  tags: tmux

- name: Download yt-dlp
  get_url:
    url: https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_linux
    dest: /usr/local/bin/yt-dlp
    mode: '755'
  tags: yt

- name: Copy autostarting app .desktop files
  copy:
    src: autostart/
    dest: ~/.config/autostart/
